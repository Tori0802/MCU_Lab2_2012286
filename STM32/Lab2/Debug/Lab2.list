
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800233c  0800233c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800233c  0800233c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800233c  0800233c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000028  0800236c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800236c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000855e  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001562  00000000  00000000  000285af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00029b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001631a  00000000  00000000  0002ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f4  00000000  00000000  0004109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820da  00000000  00000000  0004a78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc868  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000cc8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080022f8 	.word	0x080022f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080022f8 	.word	0x080022f8

0800014c <setTimer0>:
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0(int duration) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer0+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer0+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer0+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000004 	.word	0x20000004
 8000178:	20000044 	.word	0x20000044
 800017c:	20000048 	.word	0x20000048

08000180 <setTimer1>:
void setTimer1(int duration) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer1+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer1+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer1+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000004 	.word	0x20000004
 80001ac:	2000004c 	.word	0x2000004c
 80001b0:	20000000 	.word	0x20000000

080001b4 <setTimer2>:
void setTimer2(int duration) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer2+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer2+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer2+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000004 	.word	0x20000004
 80001e0:	20000050 	.word	0x20000050
 80001e4:	20000054 	.word	0x20000054

080001e8 <setTimer3>:
void setTimer3(int duration) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <setTimer3+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80001fa:	4a06      	ldr	r2, [pc, #24]	; (8000214 <setTimer3+0x2c>)
 80001fc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <setTimer3+0x30>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000004 	.word	0x20000004
 8000214:	20000058 	.word	0x20000058
 8000218:	2000005c 	.word	0x2000005c

0800021c <setTimer4>:
void setTimer4(int duration) {
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <setTimer4+0x28>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	fb92 f3f3 	sdiv	r3, r2, r3
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <setTimer4+0x2c>)
 8000230:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <setTimer4+0x30>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000004 	.word	0x20000004
 8000248:	20000060 	.word	0x20000060
 800024c:	20000064 	.word	0x20000064

08000250 <timer_run>:

void timer_run() {
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	if(timer0_counter > 0) {
 8000254:	4b29      	ldr	r3, [pc, #164]	; (80002fc <timer_run+0xac>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	dd0b      	ble.n	8000274 <timer_run+0x24>
		timer0_counter--;
 800025c:	4b27      	ldr	r3, [pc, #156]	; (80002fc <timer_run+0xac>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3b01      	subs	r3, #1
 8000262:	4a26      	ldr	r2, [pc, #152]	; (80002fc <timer_run+0xac>)
 8000264:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <timer_run+0xac>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d102      	bne.n	8000274 <timer_run+0x24>
 800026e:	4b24      	ldr	r3, [pc, #144]	; (8000300 <timer_run+0xb0>)
 8000270:	2201      	movs	r2, #1
 8000272:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter > 0) {
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <timer_run+0xb4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	dd0b      	ble.n	8000294 <timer_run+0x44>
		timer1_counter--;
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <timer_run+0xb4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3b01      	subs	r3, #1
 8000282:	4a20      	ldr	r2, [pc, #128]	; (8000304 <timer_run+0xb4>)
 8000284:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <timer_run+0xb4>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <timer_run+0x44>
 800028e:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <timer_run+0xb8>)
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0) {
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <timer_run+0xbc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	dd0b      	ble.n	80002b4 <timer_run+0x64>
		timer2_counter--;
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <timer_run+0xbc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	4a1a      	ldr	r2, [pc, #104]	; (800030c <timer_run+0xbc>)
 80002a4:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <timer_run+0xbc>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d102      	bne.n	80002b4 <timer_run+0x64>
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <timer_run+0xc0>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0) {
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <timer_run+0xc4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	dd0b      	ble.n	80002d4 <timer_run+0x84>
		timer3_counter--;
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <timer_run+0xc4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a14      	ldr	r2, [pc, #80]	; (8000314 <timer_run+0xc4>)
 80002c4:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <timer_run+0xc4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d102      	bne.n	80002d4 <timer_run+0x84>
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <timer_run+0xc8>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter > 0) {
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <timer_run+0xcc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	dd0b      	ble.n	80002f4 <timer_run+0xa4>
		timer4_counter--;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <timer_run+0xcc>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <timer_run+0xcc>)
 80002e4:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <timer_run+0xcc>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <timer_run+0xa4>
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <timer_run+0xd0>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
	}
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	20000044 	.word	0x20000044
 8000300:	20000048 	.word	0x20000048
 8000304:	2000004c 	.word	0x2000004c
 8000308:	20000000 	.word	0x20000000
 800030c:	20000050 	.word	0x20000050
 8000310:	20000054 	.word	0x20000054
 8000314:	20000058 	.word	0x20000058
 8000318:	2000005c 	.word	0x2000005c
 800031c:	20000060 	.word	0x20000060
 8000320:	20000064 	.word	0x20000064

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 fcd2 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f920 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f000 f9a6 	bl	8000680 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000334:	f000 f958 	bl	80005e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000338:	4880      	ldr	r0, [pc, #512]	; (800053c <main+0x218>)
 800033a:	f001 fc1d 	bl	8001b78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(1000); /* Set timer ban dau cho DOT la 1s */
 800033e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000342:	f7ff ff03 	bl	800014c <setTimer0>
  /* O day khong setTimer ban dau cho 4 LEDs 7-segment ma thay vao do ta dat gia tri ban dau timer1_flag = 1 */
  /* Li do vi de khong xay ra delay trong qua trinh quet cac led 7-segment */
  setTimer2(2000); /* Set timer ban dau cho LED_RED la 2s */
 8000346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800034a:	f7ff ff33 	bl	80001b4 <setTimer2>
  setTimer3(250); /* Set timer ban dau cho thoi gian quet tung hang la 0.25s */
 800034e:	20fa      	movs	r0, #250	; 0xfa
 8000350:	f7ff ff4a 	bl	80001e8 <setTimer3>
  setTimer4(2000); /* Set timer cho thoi gian chuyen doi animation chu A la 2s */
 8000354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000358:	f7ff ff60 	bl	800021c <setTimer4>
  updateClockBuffer(); /* Cap nhat trang thai ban dau */
 800035c:	f000 fa50 	bl	8000800 <updateClockBuffer>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(timer0_flag == 1) { /* Neu timer0_flag = 1, ta se setTimer lai voi gia tri 1 giay, dong thoi thay doi cac trang thai moi */
 8000360:	4b77      	ldr	r3, [pc, #476]	; (8000540 <main+0x21c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d133      	bne.n	80003d0 <main+0xac>
		  setTimer0(1000); /* setTimer */
 8000368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036c:	f7ff feee 	bl	800014c <setTimer0>
		  second++; /* Update gio, phut, giay o giay moi */
 8000370:	4b74      	ldr	r3, [pc, #464]	; (8000544 <main+0x220>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	4a73      	ldr	r2, [pc, #460]	; (8000544 <main+0x220>)
 8000378:	6013      	str	r3, [r2, #0]
		  if (second >= 60) {
 800037a:	4b72      	ldr	r3, [pc, #456]	; (8000544 <main+0x220>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b3b      	cmp	r3, #59	; 0x3b
 8000380:	dd07      	ble.n	8000392 <main+0x6e>
			  second = 0;
 8000382:	4b70      	ldr	r3, [pc, #448]	; (8000544 <main+0x220>)
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
			  minute++;
 8000388:	4b6f      	ldr	r3, [pc, #444]	; (8000548 <main+0x224>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	4a6e      	ldr	r2, [pc, #440]	; (8000548 <main+0x224>)
 8000390:	6013      	str	r3, [r2, #0]
		  }
		  if (minute >= 60) {
 8000392:	4b6d      	ldr	r3, [pc, #436]	; (8000548 <main+0x224>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b3b      	cmp	r3, #59	; 0x3b
 8000398:	dd07      	ble.n	80003aa <main+0x86>
			  minute = 0;
 800039a:	4b6b      	ldr	r3, [pc, #428]	; (8000548 <main+0x224>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
			  hour++;
 80003a0:	4b6a      	ldr	r3, [pc, #424]	; (800054c <main+0x228>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	4a69      	ldr	r2, [pc, #420]	; (800054c <main+0x228>)
 80003a8:	6013      	str	r3, [r2, #0]
		  }
		  if (hour >= 24) {
 80003aa:	4b68      	ldr	r3, [pc, #416]	; (800054c <main+0x228>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b17      	cmp	r3, #23
 80003b0:	dd02      	ble.n	80003b8 <main+0x94>
			  hour = 0;
 80003b2:	4b66      	ldr	r3, [pc, #408]	; (800054c <main+0x228>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
		  }
		  updateClockBuffer(hour, minute); /* Cap nhat lai led_buffer */
 80003b8:	4b64      	ldr	r3, [pc, #400]	; (800054c <main+0x228>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a62      	ldr	r2, [pc, #392]	; (8000548 <main+0x224>)
 80003be:	6812      	ldr	r2, [r2, #0]
 80003c0:	4611      	mov	r1, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fa1c 	bl	8000800 <updateClockBuffer>
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin); /* Toggle DOT pin */
 80003c8:	2110      	movs	r1, #16
 80003ca:	4861      	ldr	r0, [pc, #388]	; (8000550 <main+0x22c>)
 80003cc:	f000 ff82 	bl	80012d4 <HAL_GPIO_TogglePin>
	  }

	  if (timer1_flag == 1) { /* Neu timer1_flag = 1, ta se setTimer lai voi gia tri 0.25 giay, dong thoi thay doi cac trang thai moi */
 80003d0:	4b60      	ldr	r3, [pc, #384]	; (8000554 <main+0x230>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	f040 8089 	bne.w	80004ec <main+0x1c8>
		  setTimer1(250); /* setTimer */
 80003da:	20fa      	movs	r0, #250	; 0xfa
 80003dc:	f7ff fed0 	bl	8000180 <setTimer1>
		  display7SEG(led_buffer[index_led]); /* Hien thi led 7-segment */
 80003e0:	4b5d      	ldr	r3, [pc, #372]	; (8000558 <main+0x234>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a5d      	ldr	r2, [pc, #372]	; (800055c <main+0x238>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f99e 	bl	800072c <display7SEG>
		  switch(index_led) {
 80003f0:	4b59      	ldr	r3, [pc, #356]	; (8000558 <main+0x234>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d87b      	bhi.n	80004f0 <main+0x1cc>
 80003f8:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <main+0xdc>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	08000411 	.word	0x08000411
 8000404:	08000449 	.word	0x08000449
 8000408:	08000481 	.word	0x08000481
 800040c:	080004b9 	.word	0x080004b9
			case 0:
				// Display the second 7 SEG with led_buffer [0]
				index_led++;
 8000410:	4b51      	ldr	r3, [pc, #324]	; (8000558 <main+0x234>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	4a50      	ldr	r2, [pc, #320]	; (8000558 <main+0x234>)
 8000418:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2140      	movs	r1, #64	; 0x40
 800041e:	484c      	ldr	r0, [pc, #304]	; (8000550 <main+0x22c>)
 8000420:	f000 ff40 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	4849      	ldr	r0, [pc, #292]	; (8000550 <main+0x22c>)
 800042a:	f000 ff3b 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	4846      	ldr	r0, [pc, #280]	; (8000550 <main+0x22c>)
 8000436:	f000 ff35 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800043a:	2201      	movs	r2, #1
 800043c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000440:	4843      	ldr	r0, [pc, #268]	; (8000550 <main+0x22c>)
 8000442:	f000 ff2f 	bl	80012a4 <HAL_GPIO_WritePin>
				break;
 8000446:	e054      	b.n	80004f2 <main+0x1ce>
			case 1:
				// Display the second 7 SEG with led_buffer [1]
				index_led++;
 8000448:	4b43      	ldr	r3, [pc, #268]	; (8000558 <main+0x234>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	4a42      	ldr	r2, [pc, #264]	; (8000558 <main+0x234>)
 8000450:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	483e      	ldr	r0, [pc, #248]	; (8000550 <main+0x22c>)
 8000458:	f000 ff24 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	483b      	ldr	r0, [pc, #236]	; (8000550 <main+0x22c>)
 8000462:	f000 ff1f 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4838      	ldr	r0, [pc, #224]	; (8000550 <main+0x22c>)
 800046e:	f000 ff19 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000478:	4835      	ldr	r0, [pc, #212]	; (8000550 <main+0x22c>)
 800047a:	f000 ff13 	bl	80012a4 <HAL_GPIO_WritePin>
				break;
 800047e:	e038      	b.n	80004f2 <main+0x1ce>
			case 2:
				// Display the third 7 SEG with led_buffer [2]
				index_led++;
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <main+0x234>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	4a34      	ldr	r2, [pc, #208]	; (8000558 <main+0x234>)
 8000488:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2140      	movs	r1, #64	; 0x40
 800048e:	4830      	ldr	r0, [pc, #192]	; (8000550 <main+0x22c>)
 8000490:	f000 ff08 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2180      	movs	r1, #128	; 0x80
 8000498:	482d      	ldr	r0, [pc, #180]	; (8000550 <main+0x22c>)
 800049a:	f000 ff03 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a4:	482a      	ldr	r0, [pc, #168]	; (8000550 <main+0x22c>)
 80004a6:	f000 fefd 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b0:	4827      	ldr	r0, [pc, #156]	; (8000550 <main+0x22c>)
 80004b2:	f000 fef7 	bl	80012a4 <HAL_GPIO_WritePin>
				break;
 80004b6:	e01c      	b.n	80004f2 <main+0x1ce>
			case 3:
				// Display the forth 7 SEG with led_buffer [3]
				index_led = 0;
 80004b8:	4b27      	ldr	r3, [pc, #156]	; (8000558 <main+0x234>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	4823      	ldr	r0, [pc, #140]	; (8000550 <main+0x22c>)
 80004c4:	f000 feee 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4820      	ldr	r0, [pc, #128]	; (8000550 <main+0x22c>)
 80004ce:	f000 fee9 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	481d      	ldr	r0, [pc, #116]	; (8000550 <main+0x22c>)
 80004da:	f000 fee3 	bl	80012a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e4:	481a      	ldr	r0, [pc, #104]	; (8000550 <main+0x22c>)
 80004e6:	f000 fedd 	bl	80012a4 <HAL_GPIO_WritePin>
				break;
 80004ea:	e002      	b.n	80004f2 <main+0x1ce>
			default:
				break;
			}
	  }
 80004ec:	bf00      	nop
 80004ee:	e000      	b.n	80004f2 <main+0x1ce>
				break;
 80004f0:	bf00      	nop

	  if(timer2_flag == 1) { /* Neu timer2_flag = 1, ta se setTimer lai voi gia tri 2 giay, dong thoi thay doi cac trang thai moi */
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <main+0x23c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d107      	bne.n	800050a <main+0x1e6>
	  		  setTimer2(2000); /* Set Timer */
 80004fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fe:	f7ff fe59 	bl	80001b4 <setTimer2>
	  		  HAL_GPIO_TogglePin(LR_GPIO_Port, LR_Pin); /* Toggle LED_RED pin */
 8000502:	2120      	movs	r1, #32
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <main+0x22c>)
 8000506:	f000 fee5 	bl	80012d4 <HAL_GPIO_TogglePin>
	  		}

	  if(timer3_flag == 1) { /* Neu timer3_flag = 1, ta se setTimer lai voi gia tri 0.25 giay, dong thoi update lai LED Matrix */
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <main+0x240>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d107      	bne.n	8000522 <main+0x1fe>
		  	  setTimer3(250);
 8000512:	20fa      	movs	r0, #250	; 0xfa
 8000514:	f7ff fe68 	bl	80001e8 <setTimer3>
		  	  updateLEDMatrix(index_led_matrix);
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <main+0x244>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fa27 	bl	8000970 <updateLEDMatrix>
	  }

	  if(timer4_flag == 1) { /* Neu timer4_flag = 1, ta se setTimer lai voi gia tri 2 giay, dong thoi update lai trang thai thay doi hieu ung chu A cua LED Matrix */
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <main+0x248>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	f47f af1a 	bne.w	8000360 <main+0x3c>
		  	  setTimer4(2000);
 800052c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000530:	f7ff fe74 	bl	800021c <setTimer4>
		  	  updateMatrixAnimation();
 8000534:	f000 fada 	bl	8000aec <updateMatrixAnimation>
	  if(timer0_flag == 1) { /* Neu timer0_flag = 1, ta se setTimer lai voi gia tri 1 giay, dong thoi thay doi cac trang thai moi */
 8000538:	e712      	b.n	8000360 <main+0x3c>
 800053a:	bf00      	nop
 800053c:	20000084 	.word	0x20000084
 8000540:	20000048 	.word	0x20000048
 8000544:	20000010 	.word	0x20000010
 8000548:	2000000c 	.word	0x2000000c
 800054c:	20000008 	.word	0x20000008
 8000550:	40010800 	.word	0x40010800
 8000554:	20000000 	.word	0x20000000
 8000558:	20000068 	.word	0x20000068
 800055c:	20000074 	.word	0x20000074
 8000560:	20000054 	.word	0x20000054
 8000564:	2000005c 	.word	0x2000005c
 8000568:	2000006c 	.word	0x2000006c
 800056c:	20000064 	.word	0x20000064

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b090      	sub	sp, #64	; 0x40
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 feb2 	bl	80022e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 feae 	bl	8001308 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005b2:	f000 fad3 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f91a 	bl	8001808 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005da:	f000 fabf 	bl	8000b5c <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3740      	adds	r7, #64	; 0x40
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_TIM2_Init+0x94>)
 8000606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_TIM2_Init+0x94>)
 800060e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_TIM2_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_TIM2_Init+0x94>)
 800061c:	2209      	movs	r2, #9
 800061e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_TIM2_Init+0x94>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_TIM2_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <MX_TIM2_Init+0x94>)
 800062e:	f001 fa53 	bl	8001ad8 <HAL_TIM_Base_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000638:	f000 fa90 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4619      	mov	r1, r3
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_TIM2_Init+0x94>)
 800064a:	f001 fbe9 	bl	8001e20 <HAL_TIM_ConfigClockSource>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fa82 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_TIM2_Init+0x94>)
 8000666:	f001 fdb1 	bl	80021cc <HAL_TIMEx_MasterConfigSynchronization>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000670:	f000 fa74 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000084 	.word	0x20000084

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_GPIO_Init+0xa0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_GPIO_Init+0xa0>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LR_Pin
 80006c4:	2200      	movs	r2, #0
 80006c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_GPIO_Init+0xa4>)
 80006cc:	f000 fdea 	bl	80012a4 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80006d0:	2200      	movs	r2, #0
 80006d2:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006d8:	f000 fde4 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LR_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LR_Pin
 80006dc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80006e0:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0xa4>)
 80006f6:	f000 fc5b 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80006fa:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80006fe:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0xa8>)
 8000714:	f000 fc4c 	bl	8000fb0 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00

0800072c <display7SEG>:

/* USER CODE BEGIN 4 */
/* 7 LED SEGMENT */

void display7SEG(int counter) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	/* Khoi tao mot day gom gia tri bit de hien thi cac chu so lan luot tu 0 toi 9 */
	unsigned char disp_arr[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};
 8000734:	4a30      	ldr	r2, [pc, #192]	; (80007f8 <display7SEG+0xcc>)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	ca07      	ldmia	r2, {r0, r1, r2}
 800073c:	c303      	stmia	r3!, {r0, r1}
 800073e:	801a      	strh	r2, [r3, #0]
	/* Khoi tao bien "varr" chua gia tri bit 7 doan cua bien "counter" de hien thi con so can hien thi va bien "bit_var" */
	unsigned char bit_var, varr = disp_arr[counter];
 8000740:	f107 020c 	add.w	r2, r7, #12
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	75fb      	strb	r3, [r7, #23]

	/* Doi voi tung doan segment, bien bit_var se lay gia tri bit cua segment do de hien thi den (0 -> Sang, 1 -> Tat) */

	bit_var = varr & 0x01; /* Den P1 */
 800074c:	7dfb      	ldrb	r3, [r7, #23]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, bit_var);
 8000754:	7dbb      	ldrb	r3, [r7, #22]
 8000756:	461a      	mov	r2, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4828      	ldr	r0, [pc, #160]	; (80007fc <display7SEG+0xd0>)
 800075c:	f000 fda2 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>1) & 0x01; /* Den P2 */
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, bit_var);
 800076c:	7dbb      	ldrb	r3, [r7, #22]
 800076e:	461a      	mov	r2, r3
 8000770:	2102      	movs	r1, #2
 8000772:	4822      	ldr	r0, [pc, #136]	; (80007fc <display7SEG+0xd0>)
 8000774:	f000 fd96 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>2) & 0x01; /* Den P3 */
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, bit_var);
 8000784:	7dbb      	ldrb	r3, [r7, #22]
 8000786:	461a      	mov	r2, r3
 8000788:	2104      	movs	r1, #4
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <display7SEG+0xd0>)
 800078c:	f000 fd8a 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>3) & 0x01; /* Den P4 */
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, bit_var);
 800079c:	7dbb      	ldrb	r3, [r7, #22]
 800079e:	461a      	mov	r2, r3
 80007a0:	2108      	movs	r1, #8
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <display7SEG+0xd0>)
 80007a4:	f000 fd7e 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>4) & 0x01; /* Den P5 */
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, bit_var);
 80007b4:	7dbb      	ldrb	r3, [r7, #22]
 80007b6:	461a      	mov	r2, r3
 80007b8:	2110      	movs	r1, #16
 80007ba:	4810      	ldr	r0, [pc, #64]	; (80007fc <display7SEG+0xd0>)
 80007bc:	f000 fd72 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>5) & 0x01; /* Den P6 */
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	095b      	lsrs	r3, r3, #5
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, bit_var);
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	461a      	mov	r2, r3
 80007d0:	2120      	movs	r1, #32
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <display7SEG+0xd0>)
 80007d4:	f000 fd66 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>6) & 0x01; /* Den P7 */
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, bit_var);
 80007e4:	7dbb      	ldrb	r3, [r7, #22]
 80007e6:	461a      	mov	r2, r3
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <display7SEG+0xd0>)
 80007ec:	f000 fd5a 	bl	80012a4 <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08002310 	.word	0x08002310
 80007fc:	40010c00 	.word	0x40010c00

08000800 <updateClockBuffer>:


void updateClockBuffer() {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	led_buffer[0] = hour / 10;  /* Lay gia tri hang chuc cua bien hour */
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <updateClockBuffer+0x70>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <updateClockBuffer+0x74>)
 800080a:	fb82 1203 	smull	r1, r2, r2, r3
 800080e:	1092      	asrs	r2, r2, #2
 8000810:	17db      	asrs	r3, r3, #31
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <updateClockBuffer+0x78>)
 8000816:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;  /* Lay gia tri hang don vi cua bien hour */
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <updateClockBuffer+0x70>)
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <updateClockBuffer+0x74>)
 800081e:	fb83 2301 	smull	r2, r3, r3, r1
 8000822:	109a      	asrs	r2, r3, #2
 8000824:	17cb      	asrs	r3, r1, #31
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	1aca      	subs	r2, r1, r3
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <updateClockBuffer+0x78>)
 8000834:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;  /* Lay gia tri hang chuc cua bien minute */
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <updateClockBuffer+0x7c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <updateClockBuffer+0x74>)
 800083c:	fb82 1203 	smull	r1, r2, r2, r3
 8000840:	1092      	asrs	r2, r2, #2
 8000842:	17db      	asrs	r3, r3, #31
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <updateClockBuffer+0x78>)
 8000848:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;  /* Lay gia tri hang don vi cua bien minute */
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <updateClockBuffer+0x7c>)
 800084c:	6819      	ldr	r1, [r3, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <updateClockBuffer+0x74>)
 8000850:	fb83 2301 	smull	r2, r3, r3, r1
 8000854:	109a      	asrs	r2, r3, #2
 8000856:	17cb      	asrs	r3, r1, #31
 8000858:	1ad2      	subs	r2, r2, r3
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	1aca      	subs	r2, r1, r3
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <updateClockBuffer+0x78>)
 8000866:	60da      	str	r2, [r3, #12]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000008 	.word	0x20000008
 8000874:	66666667 	.word	0x66666667
 8000878:	20000074 	.word	0x20000074
 800087c:	2000000c 	.word	0x2000000c

08000880 <displayMatrix>:


/* LED MATRIX */

/* Ham displayMatrix dung de hien thi den cua hang "num" */
void displayMatrix(int num) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	/* Khoi tao bien "varr" chua gia tri bit 7 doan cua hang "num" de hien thi va bien "bit_var" */
	/* Vi o array matrix_buffer thi cac gia tri bit dang bi nguoc so voi mong muon hien thi nen voi moi gia tri duoc dua vao bien varr se duoc dao bit cho dung quy luat 0 -> Sang, 1 -> Tat */
	int bit_var, varr = ~matrix_buffer[num];
 8000888:	4a37      	ldr	r2, [pc, #220]	; (8000968 <displayMatrix+0xe8>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	43db      	mvns	r3, r3
 8000892:	60fb      	str	r3, [r7, #12]

	/* Doi voi tung den o moi hang, bien bit_var se lay gia tri bit den do de hien thi den */
	bit_var = varr & 0x01; /* Den 0 */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, bit_var);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	2104      	movs	r1, #4
 80008a4:	4831      	ldr	r0, [pc, #196]	; (800096c <displayMatrix+0xec>)
 80008a6:	f000 fcfd 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>1) & 0x01; /* Den 1 */
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	105b      	asrs	r3, r3, #1
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, bit_var);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	2108      	movs	r1, #8
 80008bc:	482b      	ldr	r0, [pc, #172]	; (800096c <displayMatrix+0xec>)
 80008be:	f000 fcf1 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>2) & 0x01; /* Den 2 */
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	109b      	asrs	r3, r3, #2
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, bit_var);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d6:	4825      	ldr	r0, [pc, #148]	; (800096c <displayMatrix+0xec>)
 80008d8:	f000 fce4 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>3) & 0x01; /* Den 3 */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	10db      	asrs	r3, r3, #3
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, bit_var);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f0:	481e      	ldr	r0, [pc, #120]	; (800096c <displayMatrix+0xec>)
 80008f2:	f000 fcd7 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>4) & 0x01; /* Den 4 */
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	111b      	asrs	r3, r3, #4
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, bit_var);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	4818      	ldr	r0, [pc, #96]	; (800096c <displayMatrix+0xec>)
 800090c:	f000 fcca 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>5) & 0x01; /* Den 5 */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	115b      	asrs	r3, r3, #5
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, bit_var);
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <displayMatrix+0xec>)
 8000926:	f000 fcbd 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>6) & 0x01; /* Den 6 */
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	119b      	asrs	r3, r3, #6
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, bit_var);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <displayMatrix+0xec>)
 8000940:	f000 fcb0 	bl	80012a4 <HAL_GPIO_WritePin>

	bit_var = (varr>>7) & 0x01; /* Den 7 */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	11db      	asrs	r3, r3, #7
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, bit_var);
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <displayMatrix+0xec>)
 800095a:	f000 fca3 	bl	80012a4 <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000014 	.word	0x20000014
 800096c:	40010800 	.word	0x40010800

08000970 <updateLEDMatrix>:

/* Ham updateLEDMatrix dung de scan hang "index" dang xet */
void updateLEDMatrix(int index) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b07      	cmp	r3, #7
 800097c:	f200 80ac 	bhi.w	8000ad8 <updateLEDMatrix+0x168>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <updateLEDMatrix+0x18>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	080009a9 	.word	0x080009a9
 800098c:	080009cf 	.word	0x080009cf
 8000990:	080009f5 	.word	0x080009f5
 8000994:	08000a1b 	.word	0x08000a1b
 8000998:	08000a41 	.word	0x08000a41
 800099c:	08000a67 	.word	0x08000a67
 80009a0:	08000a8d 	.word	0x08000a8d
 80009a4:	08000ab3 	.word	0x08000ab3
	switch (index){
	/* Voi tham so index dua vao, hang co gia tri "index" se duoc RESET, con cac hang khac se SET */
	/* Sau do voi hang index, ta goi ham displayMatrix de hien thi den, cuoi cung cap nhat gia tri index_led_matrix de chuan bi cho lan quet hang tiep theo */
	case 0:	/* ROW0 */
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	484d      	ldr	r0, [pc, #308]	; (8000ae4 <updateLEDMatrix+0x174>)
 80009b0:	f000 fc78 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin | ROW6_Pin | ROW7_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80009ba:	484a      	ldr	r0, [pc, #296]	; (8000ae4 <updateLEDMatrix+0x174>)
 80009bc:	f000 fc72 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff5d 	bl	8000880 <displayMatrix>
		index_led_matrix = 1;
 80009c6:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <updateLEDMatrix+0x178>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
		break;
 80009cc:	e085      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 1:	/* ROW1 */
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	4843      	ldr	r0, [pc, #268]	; (8000ae4 <updateLEDMatrix+0x174>)
 80009d6:	f000 fc65 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW0_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin | ROW6_Pin | ROW7_Pin, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 80009e0:	4840      	ldr	r0, [pc, #256]	; (8000ae4 <updateLEDMatrix+0x174>)
 80009e2:	f000 fc5f 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff4a 	bl	8000880 <displayMatrix>
		index_led_matrix = 2;
 80009ec:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <updateLEDMatrix+0x178>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	601a      	str	r2, [r3, #0]
		break;
 80009f2:	e072      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 2:	/* ROW2 */
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	483a      	ldr	r0, [pc, #232]	; (8000ae4 <updateLEDMatrix+0x174>)
 80009fc:	f000 fc52 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW1_Pin | ROW0_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin | ROW6_Pin | ROW7_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 417b 	mov.w	r1, #64256	; 0xfb00
 8000a06:	4837      	ldr	r0, [pc, #220]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a08:	f000 fc4c 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff37 	bl	8000880 <displayMatrix>
		index_led_matrix = 3;
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <updateLEDMatrix+0x178>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	601a      	str	r2, [r3, #0]
		break;
 8000a18:	e05f      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 3:	/* ROW3 */
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a22:	f000 fc3f 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW0_Pin | ROW4_Pin | ROW5_Pin | ROW6_Pin | ROW7_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 4177 	mov.w	r1, #63232	; 0xf700
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a2e:	f000 fc39 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff24 	bl	8000880 <displayMatrix>
		index_led_matrix = 4;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <updateLEDMatrix+0x178>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	601a      	str	r2, [r3, #0]
		break;
 8000a3e:	e04c      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 4:	/* ROW4 */
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a48:	f000 fc2c 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW0_Pin | ROW5_Pin | ROW6_Pin | ROW7_Pin, SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000a52:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a54:	f000 fc26 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff11 	bl	8000880 <displayMatrix>
		index_led_matrix = 5;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <updateLEDMatrix+0x178>)
 8000a60:	2205      	movs	r2, #5
 8000a62:	601a      	str	r2, [r3, #0]
		break;
 8000a64:	e039      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 5:	/* ROW5 */
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	481d      	ldr	r0, [pc, #116]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a6e:	f000 fc19 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW0_Pin | ROW6_Pin | ROW7_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a7a:	f000 fc13 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fefe 	bl	8000880 <displayMatrix>
		index_led_matrix = 6;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <updateLEDMatrix+0x178>)
 8000a86:	2206      	movs	r2, #6
 8000a88:	601a      	str	r2, [r3, #0]
		break;
 8000a8a:	e026      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 6:	/* ROW6 */
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000a94:	f000 fc06 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin | ROW0_Pin | ROW7_Pin, SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000aa0:	f000 fc00 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff feeb 	bl	8000880 <displayMatrix>
		index_led_matrix = 7;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <updateLEDMatrix+0x178>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
		break;
 8000ab0:	e013      	b.n	8000ada <updateLEDMatrix+0x16a>
	case 7:	/* ROW7 */
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000aba:	f000 fbf3 	bl	80012a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin | ROW5_Pin | ROW6_Pin | ROW0_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <updateLEDMatrix+0x174>)
 8000ac6:	f000 fbed 	bl	80012a4 <HAL_GPIO_WritePin>
		displayMatrix(index);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fed8 	bl	8000880 <displayMatrix>
		index_led_matrix = 0;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <updateLEDMatrix+0x178>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
		break;
 8000ad6:	e000      	b.n	8000ada <updateLEDMatrix+0x16a>
	default:
		break;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	2000006c 	.word	0x2000006c

08000aec <updateMatrixAnimation>:

uint8_t temp;
/* Ham updateMatrixAnimation dung de shift chu cai theo huong len tren */
void updateMatrixAnimation() {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	/* Gia tri dau tien cua mang matrix_buffer se bi day xuong duoi mang, con lai cac gia tri sau se duoc day len tren ung voi moi lan timer4 */
	temp = matrix_buffer[0];
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <updateMatrixAnimation+0x58>)
 8000af6:	701a      	strb	r2, [r3, #0]
	matrix_buffer[0] = matrix_buffer[1];
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000afa:	785a      	ldrb	r2, [r3, #1]
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000afe:	701a      	strb	r2, [r3, #0]
	matrix_buffer[1] = matrix_buffer[2];
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b02:	789a      	ldrb	r2, [r3, #2]
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b06:	705a      	strb	r2, [r3, #1]
	matrix_buffer[2] = matrix_buffer[3];
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b0a:	78da      	ldrb	r2, [r3, #3]
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b0e:	709a      	strb	r2, [r3, #2]
	matrix_buffer[3] = matrix_buffer[4];
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b12:	791a      	ldrb	r2, [r3, #4]
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b16:	70da      	strb	r2, [r3, #3]
	matrix_buffer[4] = matrix_buffer[5];
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b1a:	795a      	ldrb	r2, [r3, #5]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b1e:	711a      	strb	r2, [r3, #4]
	matrix_buffer[5] = matrix_buffer[6];
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b22:	799a      	ldrb	r2, [r3, #6]
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b26:	715a      	strb	r2, [r3, #5]
	matrix_buffer[6] = matrix_buffer[7];
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b2a:	79da      	ldrb	r2, [r3, #7]
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b2e:	719a      	strb	r2, [r3, #6]
	matrix_buffer[7] = temp;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <updateMatrixAnimation+0x58>)
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <updateMatrixAnimation+0x54>)
 8000b36:	71da      	strb	r2, [r3, #7]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	20000014 	.word	0x20000014
 8000b44:	20000070 	.word	0x20000070

08000b48 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Interrupt */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	timer_run();
 8000b50:	f7ff fb7e 	bl	8000250 <timer_run>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_MspInit+0x60>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_MspInit+0x60>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bdc:	d113      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_TIM_Base_MspInit+0x44>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_TIM_Base_MspInit+0x44>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_TIM_Base_MspInit+0x44>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	201c      	movs	r0, #28
 8000bfc:	f000 f9a1 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c00:	201c      	movs	r0, #28
 8000c02:	f000 f9ba 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f87f 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM2_IRQHandler+0x10>)
 8000c6a:	f000 ffd1 	bl	8001c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000084 	.word	0x20000084

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000caa:	f7ff ffe5 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f001 faf7 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fb37 	bl	8000324 <main>
  bx lr
 8000cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000cc0:	08002344 	.word	0x08002344
  ldr r2, =_sbss
 8000cc4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000cc8:	200000d0 	.word	0x200000d0

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x28>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f923 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff ff3c 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f93b 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f903 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000001c 	.word	0x2000001c
 8000d54:	20000024 	.word	0x20000024
 8000d58:	20000020 	.word	0x20000020

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000024 	.word	0x20000024
 8000d7c:	200000cc 	.word	0x200000cc

08000d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	200000cc 	.word	0x200000cc

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <__NVIC_EnableIRQ+0x34>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff2d 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff42 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff35 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e148      	b.n	8001256 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8137 	bne.w	8001250 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4aa3      	ldr	r2, [pc, #652]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d05e      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8000fec:	4aa1      	ldr	r2, [pc, #644]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d875      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8000ff2:	4aa1      	ldr	r2, [pc, #644]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d058      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8000ff8:	4a9f      	ldr	r2, [pc, #636]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d86f      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8000ffe:	4a9f      	ldr	r2, [pc, #636]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d052      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8001004:	4a9d      	ldr	r2, [pc, #628]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d869      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 800100a:	4a9d      	ldr	r2, [pc, #628]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d04c      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8001010:	4a9b      	ldr	r2, [pc, #620]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d863      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <HAL_GPIO_Init+0x2d4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d046      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 800101c:	4a99      	ldr	r2, [pc, #612]	; (8001284 <HAL_GPIO_Init+0x2d4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d85d      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8001022:	2b12      	cmp	r3, #18
 8001024:	d82a      	bhi.n	800107c <HAL_GPIO_Init+0xcc>
 8001026:	2b12      	cmp	r3, #18
 8001028:	d859      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <HAL_GPIO_Init+0x80>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	080010ab 	.word	0x080010ab
 8001034:	08001085 	.word	0x08001085
 8001038:	08001097 	.word	0x08001097
 800103c:	080010d9 	.word	0x080010d9
 8001040:	080010df 	.word	0x080010df
 8001044:	080010df 	.word	0x080010df
 8001048:	080010df 	.word	0x080010df
 800104c:	080010df 	.word	0x080010df
 8001050:	080010df 	.word	0x080010df
 8001054:	080010df 	.word	0x080010df
 8001058:	080010df 	.word	0x080010df
 800105c:	080010df 	.word	0x080010df
 8001060:	080010df 	.word	0x080010df
 8001064:	080010df 	.word	0x080010df
 8001068:	080010df 	.word	0x080010df
 800106c:	080010df 	.word	0x080010df
 8001070:	080010df 	.word	0x080010df
 8001074:	0800108d 	.word	0x0800108d
 8001078:	080010a1 	.word	0x080010a1
 800107c:	4a82      	ldr	r2, [pc, #520]	; (8001288 <HAL_GPIO_Init+0x2d8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001082:	e02c      	b.n	80010de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e029      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e024      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	3308      	adds	r3, #8
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e01f      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	330c      	adds	r3, #12
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e01a      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010b2:	2304      	movs	r3, #4
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e013      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c0:	2308      	movs	r3, #8
 80010c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	611a      	str	r2, [r3, #16]
          break;
 80010ca:	e009      	b.n	80010e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	615a      	str	r2, [r3, #20]
          break;
 80010d6:	e003      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          break;
 80010de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d801      	bhi.n	80010ea <HAL_GPIO_Init+0x13a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_Init+0x13e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d802      	bhi.n	80010fc <HAL_GPIO_Init+0x14c>
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_Init+0x152>
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3b08      	subs	r3, #8
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	210f      	movs	r1, #15
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	6a39      	ldr	r1, [r7, #32]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	431a      	orrs	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8090 	beq.w	8001250 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001130:	4b56      	ldr	r3, [pc, #344]	; (800128c <HAL_GPIO_Init+0x2dc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <HAL_GPIO_Init+0x2dc>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_GPIO_Init+0x2dc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001148:	4a51      	ldr	r2, [pc, #324]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a49      	ldr	r2, [pc, #292]	; (8001294 <HAL_GPIO_Init+0x2e4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1e0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a48      	ldr	r2, [pc, #288]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1dc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_GPIO_Init+0x2ec>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1d8>
 8001184:	2302      	movs	r3, #2
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001188:	2303      	movs	r3, #3
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001190:	2300      	movs	r3, #0
 8001192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011a2:	493b      	ldr	r1, [pc, #236]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4933      	ldr	r1, [pc, #204]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	492d      	ldr	r1, [pc, #180]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4929      	ldr	r1, [pc, #164]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	4923      	ldr	r1, [pc, #140]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	608b      	str	r3, [r1, #8]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	491f      	ldr	r1, [pc, #124]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 8001224:	4013      	ands	r3, r2
 8001226:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	4919      	ldr	r1, [pc, #100]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	60cb      	str	r3, [r1, #12]
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	43db      	mvns	r3, r3
 800124a:	4915      	ldr	r1, [pc, #84]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 800124c:	4013      	ands	r3, r2
 800124e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	f47f aeaf 	bne.w	8000fc4 <HAL_GPIO_Init+0x14>
  }
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	372c      	adds	r7, #44	; 0x2c
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	10320000 	.word	0x10320000
 8001278:	10310000 	.word	0x10310000
 800127c:	10220000 	.word	0x10220000
 8001280:	10210000 	.word	0x10210000
 8001284:	10120000 	.word	0x10120000
 8001288:	10110000 	.word	0x10110000
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00
 800129c:	40011000 	.word	0x40011000
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43d9      	mvns	r1, r3
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	400b      	ands	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e26c      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8087 	beq.w	8001436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001328:	4b92      	ldr	r3, [pc, #584]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b04      	cmp	r3, #4
 8001332:	d00c      	beq.n	800134e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001334:	4b8f      	ldr	r3, [pc, #572]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d112      	bne.n	8001366 <HAL_RCC_OscConfig+0x5e>
 8001340:	4b8c      	ldr	r3, [pc, #560]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d10b      	bne.n	8001366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	4b89      	ldr	r3, [pc, #548]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d06c      	beq.n	8001434 <HAL_RCC_OscConfig+0x12c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d168      	bne.n	8001434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e246      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x76>
 8001370:	4b80      	ldr	r3, [pc, #512]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e02e      	b.n	80013dc <HAL_RCC_OscConfig+0xd4>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x98>
 8001386:	4b7b      	ldr	r3, [pc, #492]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7a      	ldr	r2, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0xd4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0xbc>
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a71      	ldr	r2, [pc, #452]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b6f      	ldr	r3, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0xd4>
 80013c4:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b68      	ldr	r3, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a67      	ldr	r2, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fccc 	bl	8000d80 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fcc8 	bl	8000d80 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1fa      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b5d      	ldr	r3, [pc, #372]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0xe4>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fcb8 	bl	8000d80 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fcb4 	bl	8000d80 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1e6      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x10c>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001442:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d11c      	bne.n	8001494 <HAL_RCC_OscConfig+0x18c>
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x176>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1ba      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4939      	ldr	r1, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	e03a      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fc6d 	bl	8000d80 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc69 	bl	8000d80 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e19b      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4927      	ldr	r1, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc4c 	bl	8000d80 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc48 	bl	8000d80 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e17a      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d03a      	beq.n	800158c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d019      	beq.n	8001552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_RCC_OscConfig+0x274>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff fc2c 	bl	8000d80 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fc28 	bl	8000d80 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e15a      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 faa6 	bl	8001a9c <RCC_Delay>
 8001550:	e01c      	b.n	800158c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RCC_OscConfig+0x274>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fc12 	bl	8000d80 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155e:	e00f      	b.n	8001580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fc0e 	bl	8000d80 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d908      	bls.n	8001580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e140      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	42420000 	.word	0x42420000
 800157c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b9e      	ldr	r3, [pc, #632]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e9      	bne.n	8001560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a6 	beq.w	80016e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b97      	ldr	r3, [pc, #604]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b94      	ldr	r3, [pc, #592]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a93      	ldr	r2, [pc, #588]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b91      	ldr	r3, [pc, #580]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a8a      	ldr	r2, [pc, #552]	; (8001800 <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbcf 	bl	8000d80 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fbcb 	bl	8000d80 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	; 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0fd      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b81      	ldr	r3, [pc, #516]	; (8001800 <HAL_RCC_OscConfig+0x4f8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x312>
 800160c:	4b7b      	ldr	r3, [pc, #492]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a7a      	ldr	r2, [pc, #488]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e02d      	b.n	8001676 <HAL_RCC_OscConfig+0x36e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x334>
 8001622:	4b76      	ldr	r3, [pc, #472]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a75      	ldr	r2, [pc, #468]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	4b73      	ldr	r3, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a72      	ldr	r2, [pc, #456]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	e01c      	b.n	8001676 <HAL_RCC_OscConfig+0x36e>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x356>
 8001644:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a6c      	ldr	r2, [pc, #432]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a69      	ldr	r2, [pc, #420]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	e00b      	b.n	8001676 <HAL_RCC_OscConfig+0x36e>
 800165e:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a66      	ldr	r2, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b64      	ldr	r3, [pc, #400]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a63      	ldr	r2, [pc, #396]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb7f 	bl	8000d80 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb7b 	bl	8000d80 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0ab      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4b57      	ldr	r3, [pc, #348]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ee      	beq.n	8001686 <HAL_RCC_OscConfig+0x37e>
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb69 	bl	8000d80 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb65 	bl	8000d80 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e095      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a47      	ldr	r2, [pc, #284]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8081 	beq.w	80017f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b42      	ldr	r3, [pc, #264]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d061      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d146      	bne.n	8001792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_OscConfig+0x4fc>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fb39 	bl	8000d80 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff fb35 	bl	8000d80 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e067      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d108      	bne.n	800174c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	492d      	ldr	r1, [pc, #180]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a19      	ldr	r1, [r3, #32]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	430b      	orrs	r3, r1
 800175e:	4927      	ldr	r1, [pc, #156]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x4fc>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb09 	bl	8000d80 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fb05 	bl	8000d80 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e037      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x46a>
 8001790:	e02f      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_RCC_OscConfig+0x4fc>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff faf2 	bl	8000d80 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff faee 	bl	8000d80 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e020      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x498>
 80017be:	e018      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e013      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	40007000 	.word	0x40007000
 8001804:	42420060 	.word	0x42420060

08001808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d0      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 0207 	bic.w	r2, r3, #7
 8001832:	4965      	ldr	r1, [pc, #404]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b8      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001864:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800186e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	494d      	ldr	r1, [pc, #308]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d040      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d115      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07f      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e073      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06b      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4936      	ldr	r1, [pc, #216]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa42 	bl	8000d80 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa3e 	bl	8000d80 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e053      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d210      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4922      	ldr	r1, [pc, #136]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e032      	b.n	80019be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4916      	ldr	r1, [pc, #88]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001996:	f000 f821 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	490a      	ldr	r1, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1cc>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1d0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f9a0 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40021000 	.word	0x40021000
 80019d0:	0800232c 	.word	0x0800232c
 80019d4:	2000001c 	.word	0x2000001c
 80019d8:	20000020 	.word	0x20000020

080019dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	b490      	push	{r4, r7}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 80019e4:	1d3c      	adds	r4, r7, #4
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019ec:	f240 2301 	movw	r3, #513	; 0x201
 80019f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x40>
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x46>
 8001a1a:	e02d      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1e:	623b      	str	r3, [r7, #32]
      break;
 8001a20:	e02d      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	0c9b      	lsrs	r3, r3, #18
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a2e:	4413      	add	r3, r2
 8001a30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c5b      	lsrs	r3, r3, #17
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a4e:	4413      	add	r3, r2
 8001a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5a:	fb02 f203 	mul.w	r2, r2, r3
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	e004      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	623b      	str	r3, [r7, #32]
      break;
 8001a76:	e002      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7a:	623b      	str	r3, [r7, #32]
      break;
 8001a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc90      	pop	{r4, r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	0800231c 	.word	0x0800231c
 8001a90:	40021000 	.word	0x40021000
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	003d0900 	.word	0x003d0900

08001a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <RCC_Delay+0x34>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <RCC_Delay+0x38>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0a5b      	lsrs	r3, r3, #9
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ab8:	bf00      	nop
  }
  while (Delay --);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	60fa      	str	r2, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f9      	bne.n	8001ab8 <RCC_Delay+0x1c>
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	2000001c 	.word	0x2000001c
 8001ad4:	10624dd3 	.word	0x10624dd3

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff f864 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 fa6a 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e035      	b.n	8001bfc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_TIM_Base_Start_IT+0x90>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bba:	d004      	beq.n	8001bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_TIM_Base_Start_IT+0x94>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d111      	bne.n	8001bea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b06      	cmp	r3, #6
 8001bd6:	d010      	beq.n	8001bfa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	e007      	b.n	8001bfa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40000400 	.word	0x40000400

08001c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0202 	mvn.w	r2, #2
 8001c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f9b1 	bl	8001fba <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f9a4 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9b3 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0204 	mvn.w	r2, #4
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f987 	bl	8001fba <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f97a 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f989 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0208 	mvn.w	r2, #8
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f95d 	bl	8001fba <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f950 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f95f 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f933 	bl	8001fba <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f926 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f935 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0201 	mvn.w	r2, #1
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe feda 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	2b80      	cmp	r3, #128	; 0x80
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa67 	bl	800228e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8f9 	bl	8001fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0220 	mvn.w	r2, #32
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa32 	bl	800227c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_TIM_ConfigClockSource+0x18>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0b3      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x180>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e70:	d03e      	beq.n	8001ef0 <HAL_TIM_ConfigClockSource+0xd0>
 8001e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e76:	f200 8087 	bhi.w	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7e:	f000 8085 	beq.w	8001f8c <HAL_TIM_ConfigClockSource+0x16c>
 8001e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e86:	d87f      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001e88:	2b70      	cmp	r3, #112	; 0x70
 8001e8a:	d01a      	beq.n	8001ec2 <HAL_TIM_ConfigClockSource+0xa2>
 8001e8c:	2b70      	cmp	r3, #112	; 0x70
 8001e8e:	d87b      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001e90:	2b60      	cmp	r3, #96	; 0x60
 8001e92:	d050      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0x116>
 8001e94:	2b60      	cmp	r3, #96	; 0x60
 8001e96:	d877      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001e98:	2b50      	cmp	r3, #80	; 0x50
 8001e9a:	d03c      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0xf6>
 8001e9c:	2b50      	cmp	r3, #80	; 0x50
 8001e9e:	d873      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d058      	beq.n	8001f56 <HAL_TIM_ConfigClockSource+0x136>
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	d86f      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001ea8:	2b30      	cmp	r3, #48	; 0x30
 8001eaa:	d064      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x156>
 8001eac:	2b30      	cmp	r3, #48	; 0x30
 8001eae:	d86b      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d060      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x156>
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d867      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d05c      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x156>
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d05a      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ec0:	e062      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f000 f95c 	bl	800218e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ee4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	609a      	str	r2, [r3, #8]
      break;
 8001eee:	e04e      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f000 f945 	bl	800218e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f12:	609a      	str	r2, [r3, #8]
      break;
 8001f14:	e03b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f000 f8bc 	bl	80020a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2150      	movs	r1, #80	; 0x50
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f913 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001f34:	e02b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f000 f8da 	bl	80020fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2160      	movs	r1, #96	; 0x60
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f903 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001f54:	e01b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f000 f89c 	bl	80020a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f8f3 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f000 f8ea 	bl	800215a <TIM_ITRx_SetConfig>
        break;
 8001f86:	e002      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f88:	bf00      	nop
 8001f8a:	e000      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <TIM_Base_SetConfig+0xa8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <TIM_Base_SetConfig+0x28>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200e:	d003      	beq.n	8002018 <TIM_Base_SetConfig+0x28>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <TIM_Base_SetConfig+0xac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d108      	bne.n	800202a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <TIM_Base_SetConfig+0xa8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0x52>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0x52>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a17      	ldr	r2, [pc, #92]	; (800209c <TIM_Base_SetConfig+0xac>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <TIM_Base_SetConfig+0xa8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d103      	bne.n	8002088 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	615a      	str	r2, [r3, #20]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40012c00 	.word	0x40012c00
 800209c:	40000400 	.word	0x40000400

080020a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f023 0201 	bic.w	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f023 030a 	bic.w	r3, r3, #10
 80020dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	621a      	str	r2, [r3, #32]
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 0210 	bic.w	r2, r3, #16
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	031b      	lsls	r3, r3, #12
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	621a      	str	r2, [r3, #32]
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	f043 0307 	orr.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800218e:	b480      	push	{r7}
 8002190:	b087      	sub	sp, #28
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	021a      	lsls	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e041      	b.n	8002268 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002230:	d004      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10c      	bne.n	8002256 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4313      	orrs	r3, r2
 800224c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40000400 	.word	0x40000400

0800227c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	2600      	movs	r6, #0
 80022a4:	4d0c      	ldr	r5, [pc, #48]	; (80022d8 <__libc_init_array+0x38>)
 80022a6:	4c0d      	ldr	r4, [pc, #52]	; (80022dc <__libc_init_array+0x3c>)
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	42a6      	cmp	r6, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	f000 f822 	bl	80022f8 <_init>
 80022b4:	2600      	movs	r6, #0
 80022b6:	4d0a      	ldr	r5, [pc, #40]	; (80022e0 <__libc_init_array+0x40>)
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <__libc_init_array+0x44>)
 80022ba:	1b64      	subs	r4, r4, r5
 80022bc:	10a4      	asrs	r4, r4, #2
 80022be:	42a6      	cmp	r6, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c8:	4798      	blx	r3
 80022ca:	3601      	adds	r6, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d2:	4798      	blx	r3
 80022d4:	3601      	adds	r6, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	0800233c 	.word	0x0800233c
 80022dc:	0800233c 	.word	0x0800233c
 80022e0:	0800233c 	.word	0x0800233c
 80022e4:	08002340 	.word	0x08002340

080022e8 <memset>:
 80022e8:	4603      	mov	r3, r0
 80022ea:	4402      	add	r2, r0
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d100      	bne.n	80022f2 <memset+0xa>
 80022f0:	4770      	bx	lr
 80022f2:	f803 1b01 	strb.w	r1, [r3], #1
 80022f6:	e7f9      	b.n	80022ec <memset+0x4>

080022f8 <_init>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr

08002304 <_fini>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	bf00      	nop
 8002308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230a:	bc08      	pop	{r3}
 800230c:	469e      	mov	lr, r3
 800230e:	4770      	bx	lr
